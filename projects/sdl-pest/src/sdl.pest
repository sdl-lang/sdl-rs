program = _{SOI ~ statement* ~ EOI}

statement = {
    emptyStatement
  | importStatement ~ eos?
  | classStatement ~ eos?
  | extendStatement ~ eos?
  | controlFlow ~ eos?
  | assignStatement ~ eos?
  | defineStatement ~ eos?
  | annotation ~ eos?
  | expression
}
/*====================================================================================================================*/
emptyStatement = {eos}
eos = {Semicolon}
comma_or_semi = _{Comma|Semicolon}
block_or_stmt = _{block|Set ~ statement}
/*====================================================================================================================*/
//FIXME: 修复 nested using
importStatement = {
    "import" ~ Dot* ~ use_alias
  | "import" ~ Dot* ~ use_module_select
}
use_alias = !{String ~ "as" ~ SYMBOL|SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~"as"~SYMBOL}
use_module_select = !{SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~(ModuleSplit ~ (module_block|Star))?}
module_block = {"{"~module_tuple~ ( comma_or_semi? ~ module_tuple)* ~comma_or_semi?~"}"}
module_tuple = {use_alias|use_module_select}
ModuleSplit= _{Dot|Proportion}
/*====================================================================================================================*/
controlFlow = _{re_control|if_statement|for_statement}
condition  = _{"(" ~ expr ~ ")"|expr}
block = !{"{" ~ statement* ~ "}"}
/*====================================================================================================================*/
if_statement = {if_nested_else|if_single_else|if_nested|if_single}
if_single = _{"if" ~ condition ~ block}
if_nested = _{"if" ~ condition ~ block ~ else_if_block+}
if_single_else = _{"if" ~ condition ~ block ~ if_else_block}
if_nested_else = _{"if" ~ condition ~ block ~ else_if_block+ ~ if_else_block}
else_if_block = _{("else" ~ "if"|"ef") ~ condition ~ block}
if_else_block = _{("else"|"es") ~ block}
/*====================================================================================================================*/
for_statement = {"for" ~ pattern ~ for_if? ~ "in"~ expr ~ block ~ for_else?}
for_if = {"if" ~ expr}
for_else = {"else" ~ block}
pattern = {SYMBOL}
/*====================================================================================================================*/
re_control = {
    Return ~ expr
  | Break
  | Pass
}

//!#C678DD: Return|Yield|Break|Pass
Return = @{"return"}
Yield = @{"yield"}
Break = @{"break"}
Pass = @{"pass"}
/*====================================================================================================================*/
///#C678DD
Type = @{"type"}
/*====================================================================================================================*/
classStatement = {"class" ~ assign_pair ~ short_block?}

short_block = {"{" ~ short_statement* ~ "}"}
short_statement = {
    emptyStatement
  | "def"? ~ define_terms ~ eos?
  | "let"? ~ assign_terms ~ eos?
  | short_annotation ~ eos?
}
short_annotation = {annotation_call+~short_statement}
/*====================================================================================================================*/
extendStatement = {
    "extend" ~ Symbol ~ ("with"|Colon)? ~ short_block
}
/*====================================================================================================================*/
assignStatement = {"let" ~ assign_terms}
assign_terms = _{
    "(" ~ assign_name ~ ")" ~ block_or_stmt?
  | assign_name ~ block_or_stmt?
}
assign_name = _{assign_pair ~ (Comma ~ assign_pair)* ~ Comma?}
assign_pair = {Modifier* ~ Symbol}

/*====================================================================================================================*/
defineStatement = {"def" ~ define_terms}
define_terms = _{
    assign_pair ~ define_parameter ~ block_or_stmt?
}
define_parameter = {
    "(" ~ define_pair ~ (Comma ~ define_pair)* ~ Comma? ~ ")"
  | "(" ~ ")"
}
define_pair = {SYMBOL ~ (Set ~ expr)?}
/*====================================================================================================================*/
//!Orange:annotation_call
annotation = {annotation_call+~statement}
annotation_call = @{"@"~(list|apply|Symbol)}
/*====================================================================================================================*/
apply = !{
     "(" ~ apply_kv? ~ (Comma ~ apply_kv)* ~ Comma? ~")"
}

apply_kv = {SYMBOL~ Colon ~ expr|expr}



///#61AFEF
function_name = {SYMBOL}
function_module = {(namespace ~ Dot)? ~ (SYMBOL ~ Dot)*}
/*====================================================================================================================*/
expression = {expr ~ eos?}
expr = !{term ~ (Infix ~ term)*}
term =  {Prefix* ~ ("(" ~ expr ~ ")"|chain_call)}
tuple = {"(" ~ expr ~ (Comma ~ expr)* ~ Comma? ~ ")"}
array = {"[" ~ expr ~ (Comma ~ expr)* ~ Comma? ~ "]"}
chain_call = {data ~ (slice|apply|Suffix|dot_call)*}
dot_call = {Dot ~ Integer|Dot ~ Symbol ~ apply?}
/*====================================================================================================================*/
///Green
template = {
    EmptyTemplate|SDLFragment|Fragment
  | SDLOpenClose|OpenClose|HTMLBad|SelfClose
  | HtmlDTD|HTMLComment
}
EmptyTemplate = {"</>"}
Fragment = {"<>" ~ text_mode* ~ "</>" }
SDLFragment = {"<\\>" ~ statement* ~ "</>" }
OpenClose = {"<" ~ PUSH(Symbol) ~ html_term* ~ ">" ~ text_mode* ~ "</" ~ POP ~ ">" }
SDLOpenClose = {"<\\" ~ PUSH(Symbol) ~ html_term* ~ ">" ~ statement* ~ "</" ~ POP ~ ">" }
SelfClose = {"<" ~ Symbol ~ html_term* ~ "/>" }
HTMLBad = {"<" ~ HTMLBadSymbol ~ html_term* ~ ">" }
HTMLBadSymbol = @{
    "img"|"hr"|"br"|"input"|"link"|"meta"
  | "area"|"base"|"col"|"wbr"
  | "command"|"embed"|"keygen"|"param"|"source"|"track"
}
BadSymbol = @{(XID_START|":"|"_") ~ (XID_CONTINUE|":"|"-"|".")*}
//!Gray: HTMLComment|HtmlDTD
HTMLComment = {"<!--" ~ (!"-->" ~ ANY*) ~ "-->"}
HtmlDTD = {"<!" ~ "DOCTYPE" ~ (!">" ~ ANY*) ~ ">"}

html_term = _{BadSymbol ~ Set ~ term|BadSymbol}

text_mode = ${
    "{" ~ statement* ~ "}"|template+|(HTMLEscape|text_char)+
}
text_char = @{
    (!("{"|"}"|"<"|">") ~ ANY)|
    "{{"| "}}" |
    "<<" | ">>"
}
HTMLEscape = @{
    "&" ~ ASCII_ALPHA_LOWER ~ ";" |
    "&#" ~ Integer ~";"
}

/*====================================================================================================================*/
data = {template|dict|list|SpecialValue|Byte|Number|String|Symbol}
dict = {"{" ~ key_value? ~ (Comma ~ key_value)* ~ Comma? ~ "}"}
list = {"[" ~ expr? ~ (Comma ~ expr)* ~ Comma? ~ "]"}
slice = !{"[" ~ index ~ (Comma ~ index)* ~ Comma? ~ "]"}
index ={index_step|index_range|expr}
key_value =!{key_valid ~ Colon ~ expr}
key_valid =!{Integer | SYMBOL | String}
index_range = !{expr? ~ Colon ~ expr?}
index_step = !{expr? ~ Colon ~ expr? ~ Colon ~ expr?}
/*====================================================================================================================*/
///#D19A66
SpecialValue = @{"true"|"false"|"null"}
/*====================================================================================================================*/
///#D19A66
Byte     = ${Byte_BIN|Byte_OCT|Byte_HEX}
Byte_BIN = ${"0" ~ ("b"|"B") ~ (Underline? ~ ASCII_BIN_DIGIT)+}
Byte_OCT = ${"0" ~ ("o"|"O") ~ (Underline? ~ ASCII_OCT_DIGIT)+}
Byte_HEX = ${"0" ~ ("x"|"X") ~ (Underline? ~ ASCII_HEX_DIGIT)+}
/*====================================================================================================================*/
//!#D19A66: Integer|Decimal|DecimalBad
Number     = ${Complex|Decimal|DecimalBad|Integer}
Decimal    = ${Integer ~ Dot ~ ASCII_DIGIT+}
DecimalBad = ${Integer ~ Dot|Dot ~ ASCII_DIGIT+}
Integer    = @{"0"|ASCII_NONZERO_DIGIT ~ (Underline? ~ ASCII_DIGIT)*}
Complex    = {(Decimal|Integer)~ SYMBOL}
/*====================================================================================================================*/
//!#3C963C: String
//!#98C379: StringText|StringLiteralText
String            = ${SYMBOL? ~ (StringNormal|StringLiteral|StringEmpty)}
StringLiteral     =  {StringStart ~ StringLiteralText ~ StringEnd}
StringNormal      =  {Quotation ~ StringText ~ Quotation}
StringEmpty       =  {Quotation{2}|Apostrophe{2}}
StringLiteralText =  {(!(Apostrophe ~ PEEK) ~ ANY)*}
StringText        =  {(Solidus~(Solidus|Quotation)|!Quotation ~ ANY)*}
StringStart       = @{Apostrophe{1}~PUSH(Apostrophe*)}
StringEnd         = @{POP ~ Apostrophe{1}}
/*====================================================================================================================*/
// NEWLINE = @{"\r"~"\n"|"\r"|"\n"}
WHITESPACE = _{NEWLINE|WHITE_SPACE}
///#7F848E
COMMENT = {
    MultiLineComment
  | "%" ~ (!NEWLINE ~ ANY)*
}
MultiLineComment = ${"%%%" ~ (MultiLineComment | !"%%%" ~ ANY)* ~ "%%%"}
/*====================================================================================================================*/
///#61AFEF
Symbol = ${namespace|SYMBOL}
namespace = ${SYMBOL ~ (Proportion ~ SYMBOL)+}
SYMBOL = @{
    XID_START ~ XID_CONTINUE*
  | Underline ~ XID_CONTINUE+
}
/*====================================================================================================================*/
//!Orange: Modifier
Modifier = !{(!(SYMBOL~(Set|Colon|Semicolon|"{"|"}"|"("|")"|"<"|">")) ~SYMBOL)}
//!#56B6C2: Prefix|Infix|Postfix
Prefix = @{
    (Bang|Plus|Minus|Star)
}
Suffix = @{
   (Bang | Question)
}
Infix = _{
    Set
  | (Plus|Minus)
  | Power
  | Dot
}

///#56B6C2
Set = @{"="}

Or = @{"|"}
LazyOr = @{"||"}


Star =@{"*"}
Slash =@{"/"}
Solidus = @{"\\"}

Proportion = @{"::"|"∷"}//U+2237
Dot = @{"."}
Comma = @{","}
Semicolon = @{";"} //U+FF1B
Colon = @{":"|"："} //U+FF1A
///#56B6C2
Question=@{"?"}
Underline = @{"_"}



Load =@{"<<<"|"⋘"} //U+22D8
Save =@{">>>"|"⋙"} //U+22D9
LeftShift =@{"<<"|"≪"} //U+226A
RightShift =@{">>"|"≫"} //U+226B
LessEqual =@{"<="}
GraterEqual =@{">="}



Equivalent =@{"==="}
NotEquivalent =@{"=!="}
Equal =@{"=="}
NotEqual =@{"!="|"≠"} //U+2260







Plus =@{"+"}
Minus =@{"-"}

Power = @{"^"}
Surd = @{"√"} //U+221A


Increase =@{"++"}
Decrease =@{"--"}


To =@{"->"}


Elvis =@{":?"}


Quote =@{"`"}
Acute =@{"´"} // U+00B4
Apostrophe = @{"'"}
Quotation = @{"\""}


LogicOr =@{"||"|"∧"} //U+2227
LogicAnd =@{"&&"|"∨"} //U+2228
LogicNot =@{"¬"} //U+00AC

Ellipsis =@{"..."|"…"} // U+2026

Concat =@{"~~"}
Destruct =@{"~="}

Bang =@{"!"}

Sharp =@{"#"}
