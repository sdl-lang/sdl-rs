program = _{SOI ~ statement* ~ EOI}

statement = {
    emptyStatement
  | importStatement ~ eos?
  | classStatement ~ eos?
  | extendStatement ~ eos?
  | controlFlow ~ eos?
  | assign_statement ~ eos?
  | define_statement ~ eos?
  | annotation ~ eos?
  | expression
}
/*====================================================================================================================*/
emptyStatement = {eos}
eos = {Semicolon}
comma_or_semi = _{Comma|Semicolon}
/*====================================================================================================================*/
//FIXME: 修复 nested using
importStatement = {
    "import" ~ Dot* ~ use_alias
  | "import" ~ Dot* ~ use_module_select
}
use_alias = !{String ~ "as" ~ SYMBOL|SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~ "as" ~ SYMBOL}
use_module_select = !{SYMBOL ~ (ModuleSplit ~ SYMBOL)* ~(ModuleSplit ~ (module_block|Star))?}
module_block = {"{"~module_tuple~ (comma_or_semi? ~ module_tuple)* ~comma_or_semi? ~ "}"}
module_tuple = {use_alias|use_module_select}
ModuleSplit= _{Dot|Proportion}
/*====================================================================================================================*/
controlFlow = _{re_control|if_statement|for_statement}
condition  = _{"(" ~ expr ~ ")"|expr}
block = !{"{" ~ statement* ~ "}"}
/*====================================================================================================================*/
if_statement = {if_nested_else|if_single_else|if_nested|if_single}
if_single = _{"if" ~ condition ~ block}
if_nested = _{"if" ~ condition ~ block ~ else_if_block+}
if_single_else = _{"if" ~ condition ~ block ~ if_else_block}
if_nested_else = _{"if" ~ condition ~ block ~ else_if_block+ ~ if_else_block}
else_if_block = _{("else" ~ "if"|"ef") ~ condition ~ block}
if_else_block = _{("else"|"es"|"el") ~ block}
/*====================================================================================================================*/
for_statement = {"for" ~ (pattern|pattern_bare) ~ "in" ~ expr ~ for_if? ~ block ~ for_else?}
for_if = {"if" ~ expr}
for_else = {"else" ~ block}
pattern = {
    "(" ~ SYMBOL ~ (Comma ~ SYMBOL)* ~ ")"
  | "[" ~ SYMBOL ~ (Comma ~ SYMBOL)* ~ "]"
}
pattern_bare = {
    SYMBOL ~ (Comma ~ SYMBOL)*
}
/*====================================================================================================================*/
re_control = {
  Control ~ expr?
}
// #C678DD
Control = @{"return"|"yield"|"break"|"pass"}
/*====================================================================================================================*/
classStatement = {"class" ~ SYMBOL ~ block?}
/*====================================================================================================================*/
extendStatement = {
    "extend" ~ Symbol ~ ("with"|Colon)? ~ block
}
/*====================================================================================================================*/
//!#C678DD: assign_word
assign_statement =  {assign_word ~ (pattern|pattern_bare) ~ Set ~ expr | pattern ~ Set ~ expr}
assign_word      = @{"let"|"const"}
/*====================================================================================================================*/
//!#C678DD: define_word
define_statement =  {define_word ~ SYMBOL ~ define_terms ~ block | SYMBOL ~ define_terms ~ Set ~ (block|statement)}
define_terms     =  {"(" ~ ")" | "(" ~ define_pair ~ (Comma ~ define_pair)* ~ Comma? ~ ")"}
define_pair      =  {SYMBOL ~ (Set ~ expr)?}
define_word      = @{"def"}
/*====================================================================================================================*/
//!Orange:annotation_call
annotation = {annotation_call+~statement}
annotation_call = @{"@"~(list|apply|Symbol)}
/*====================================================================================================================*/
expression =  {expr ~ eos?}
expr       = !{term ~ (Infix ~ term)*}
term       =  {Prefix* ~ ("(" ~ expr ~ ")"|chain_call)}
chain_call =  {data ~ (slice|apply|Suffix|dot_call)*}
dot_call   = !{Dot ~ Integer|Dot ~ Symbol ~ apply?}
/*====================================================================================================================*/
data = {template|dict|list|SpecialValue|Number|String|Symbol}

tuple = {"(" ~ ")" | "(" ~ expr ~ Comma ~ ")" | "(" ~ expr ~ (Comma ~ expr)+ ~ Comma? ~ ")"}
list  = {"[" ~ "]" | "[" ~ expr ~ (Comma ~ expr)* ~ Comma? ~ "]"}
dict  = {"{" ~ "}" | "{" ~ dict_pair ~ (Comma ~ dict_pair)* ~ Comma? ~ "}"}

dict_pair = !{dict_key ~ Colon ~ expr}
dict_key  = _{Integer | SYMBOL | String}

apply     = !{"(" ~ ")" | "(" ~ apply_kv ~ (Comma ~ apply_kv)* ~ Comma? ~")"}
apply_kv  = {SYMBOL~ Set ~ expr|expr}

slice       = !{"[" ~ index ~ (Comma ~ index)* ~ Comma? ~ "]"}
index       =  {index_step|index_range|expr}
index_range = !{expr? ~ Colon ~ expr?}
index_step  = !{expr? ~ Colon ~ expr? ~ Colon ~ expr?}
/*====================================================================================================================*/
///Green
template = {
    SDLFragment|Fragment|EmptyTemplate
  | SDLOpenClose|OpenClose|HTMLBad|SelfClose
  | HtmlDTD|HTMLComment
}

EmptyTemplate = {"<|>"}
Fragment      = {"<>" ~ text_mode* ~ "</>" }
SDLFragment   = {"<\\>" ~ statement* ~ "</>" }
OpenClose     = {"<" ~ PUSH(Symbol) ~ html_term* ~ ">" ~ text_mode* ~ "</" ~ POP ~ ">" }
SDLOpenClose  = {"<\\" ~ PUSH(Symbol) ~ html_term* ~ ">" ~ statement* ~ "</" ~ POP ~ ">" }
SelfClose     = {"<" ~ Symbol ~ html_term* ~ "/>" }
HTMLBad       = {"<" ~ HTMLBadTag ~ html_term* ~ ">" }
HTMLBadTag = @{
    "img"|"hr"|"br"|"input"|"link"|"meta"
  | "area"|"base"|"col"|"wbr"
  | "command"|"embed"|"keygen"|"param"|"source"|"track"
}
//!Gray: HTMLComment|HtmlDTD
HTMLComment = {"<!--" ~ (!"-->" ~ ANY*) ~ "-->"}
HtmlDTD     = {"<!" ~ "DOCTYPE" ~ (!">" ~ ANY*) ~ ">"}

html_term = _{html_pair|BadSymbol}
html_pair = {BadSymbol ~ "=" ~ term}

text_mode = ${
    "{" ~ statement* ~ "}" | template+ | (HTMLEscape|text_char)+
}
text_char = @{
    (!("{"|"}"|"<"|">") ~ ANY) | "{{" | "}}"
}
HTMLEscape = @{
    "&" ~ ASCII_ALPHA_LOWER ~ ";" |
    "&#" ~ Integer ~ ";" | ">"
}
/*====================================================================================================================*/
///#D19A66
SpecialValue = @{"true"|"false"|"null"}
/*====================================================================================================================*/
///#D19A66
Number     = ${Byte|Decimal|DecimalBad|Integer}
Byte       = @{
    "0" ~ ("b"|"B") ~ (Underline? ~ ASCII_BIN_DIGIT)+
  | "0" ~ ("o"|"O") ~ (Underline? ~ ASCII_OCT_DIGIT)+
  | "0" ~ ("x"|"X") ~ (Underline? ~ ASCII_HEX_DIGIT)+
  | "0" ~ ("f"|"F") ~ (Underline? ~ ASCII_HEX_DIGIT)+
}
Decimal    = @{Integer ~ Dot ~ ASCII_DIGIT+}
DecimalBad = @{Integer ~ Dot|Dot ~ ASCII_DIGIT+}
Integer    = @{"0"|ASCII_NONZERO_DIGIT ~ (Underline? ~ ASCII_DIGIT)*}
/*====================================================================================================================*/
//!#3C963C: String
//!#98C379: StringNormal|StringEmpty
String       = ${SYMBOL? ~ (StringNormal|StringEmpty)}
StringEmpty  = @{S1{2}|S2{2}|S3{2}|S4{2}}
StringNormal = _{
    S1{1} ~ PUSH(S1*) ~ ("{" ~ expr ~ "}" | NS1)+ ~ POP ~ S1{1}
  | S2{1} ~ PUSH(S2*) ~ ("{" ~ expr ~ "}" | NS2)+ ~ POP ~ S2{1}
  | S3{1} ~ PUSH(S3*) ~ ("{" ~ expr ~ "}" | NS3)+ ~ POP ~ S3{1}
  | S4{1} ~ PUSH(S4*) ~ ("{" ~ expr ~ "}" | NS4)+ ~ POP ~ S4{1}
}

NS1 = @{"{{" | "}}" | Escape ~ ANY | (!(S1 ~ PEEK) ~ ANY)+}
NS2 = @{"{{" | "}}" | Escape ~ ANY | (!(S2 ~ PEEK) ~ ANY)+}
NS3 = @{"{{" | "}}" | Escape ~ ANY | (!(S3 ~ PEEK) ~ ANY)+}
NS4 = @{"{{" | "}}" | Escape ~ ANY | (!(S4 ~ PEEK) ~ ANY)+}

S1  = @{"\""}
S2  = @{"'"}
S3  = @{"´"} // U+00B4
S4  = @{"`"}
/*====================================================================================================================*/
// NEWLINE = @{"\r"~"\n"|"\r"|"\n"}
WHITESPACE = _{NEWLINE|WHITE_SPACE}
///#7F848E
COMMENT = _{
    MultiLineComment
  | "//" ~ (!NEWLINE ~ ANY)*
}
MultiLineComment = _{"/*" ~ (MultiLineComment | !"*/" ~ ANY)* ~ "*/"}
/*====================================================================================================================*/
///#61AFEF
SYMBOL = @{
    XID_START ~ XID_CONTINUE*
  | Underline ~ XID_CONTINUE+
}
BadSymbol = @{(XID_START|":"|"_") ~ (XID_CONTINUE|":"|"-"|".")*}
Symbol    = ${namespace|SYMBOL}
namespace = ${SYMBOL ~ (Proportion ~ SYMBOL)+}
/*====================================================================================================================*/
//!#56B6C2: Prefix|Infix|Suffix|Additive|Logical
Prefix = @{
    (Bang|Plus|Minus|Star)
}
Suffix = @{
   (Bang | Question)
}
Infix = _{
    Compare
  | Additive
  | Multiplied
  | Power
  | Set
}

Logical = @{
    "a"
}
Compare = !{
    "is" ~ "not" | "!="
  | "is" | "=="
  | "not" ~ "in" | "in"
  | ">" | "<"
}
Additive   = @{Plus|Minus}
Multiplied = @{Star|"/"}
Assign     = @{
    "+=" | "-="
}
///#56B6C2
Set = @{"="}

Or = @{"|"}
LazyOr = @{"||"}


Star =@{"*"}

Escape = @{"\\"}

Proportion = @{"::"|"∷"}//U+2237
Dot = @{"."}
Comma = @{","}
Semicolon = @{";"} //U+FF1B
Colon = @{":"|"："} //U+FF1A
///#56B6C2
Question=@{"?"}
Underline = @{"_"}



Load =@{"<<<"|"⋘"} //U+22D8
Save =@{">>>"|"⋙"} //U+22D9
LeftShift =@{"<<"|"≪"} //U+226A
RightShift =@{">>"|"≫"} //U+226B
LessEqual =@{"<="}
GraterEqual =@{">="}


Plus =@{"+"}
Minus =@{"-"}

Power = @{"^"}
Surd = @{"√"} //U+221A

Increase =@{"++"}
Decrease =@{"--"}


To =@{"->"}

Elvis =@{":?"}




LogicOr =@{"||"|"∧"} //U+2227
LogicAnd =@{"&&"|"∨"} //U+2228
LogicNot =@{"¬"} //U+00AC

Ellipsis =@{"..."|"…"} // U+2026

Concat =@{"~~"}
Destruct =@{"~="}

Bang =@{"!"}

Sharp =@{"#"}
